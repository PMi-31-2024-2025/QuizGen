using QuizGen.BLL.Models.Base;
using QuizGen.BLL.Services.Interfaces;
using QuizGen.DAL.Interfaces;
using System.Text;
using QuestPDF.Fluent;
using QuizGen.BLL.Services.Documents;
using System.Collections.Generic;

namespace QuizGen.BLL.Services;

public class QuizExportService : IQuizExportService
{
    private readonly IQuizRepository _quizRepository;
    private readonly IQuestionRepository _questionRepository;
    private readonly IAnswerRepository _answerRepository;
    private readonly IQuizTryRepository _quizTryRepository;

    public QuizExportService(
        IQuizRepository quizRepository,
        IQuestionRepository questionRepository,
        IAnswerRepository answerRepository,
        IQuizTryRepository quizTryRepository)
    {
        _quizRepository = quizRepository;
        _questionRepository = questionRepository;
        _answerRepository = answerRepository;
        _quizTryRepository = quizTryRepository;
    }

    public async Task<ServiceResult<byte[]>> ExportAsPdfAsync(int quizId, bool includeAnswers)
    {
        try
        {
            var quiz = await _quizRepository.GetByIdAsync(quizId);
            if (quiz == null)
                return ServiceResult<byte[]>.CreateError("Quiz not found");

            var questions = (await _questionRepository.GetByQuizIdAsync(quizId)).ToList();
            if (questions == null || !questions.Any())
                return ServiceResult<byte[]>.CreateError("No questions found for this quiz");

            var answers = (await _answerRepository.GetByQuizIdAsync(quizId)).ToList();
            if (answers == null)
                return ServiceResult<byte[]>.CreateError("Failed to load quiz answers");

            var document = new QuizDocument(quiz, questions, answers, includeAnswers);
            var pdfBytes = document.GeneratePdf();

            return ServiceResult<byte[]>.CreateSuccess(pdfBytes);
        }
        catch (Exception ex)
        {
            return ServiceResult<byte[]>.CreateError($"Failed to export quiz as PDF: {ex.Message}");
        }
    }

    public async Task<ServiceResult<byte[]>> ExportAsTextAsync(int quizId, bool includeAnswers)
    {
        try
        {
            var quiz = await _quizRepository.GetByIdAsync(quizId);
            if (quiz == null)
                return ServiceResult<byte[]>.CreateError("Quiz not found");

            var questions = await _questionRepository.GetByQuizIdAsync(quizId);
            if (questions == null || !questions.Any())
                return ServiceResult<byte[]>.CreateError("No questions found for this quiz");

            var answers = await _answerRepository.GetByQuizIdAsync(quizId);
            if (answers == null)
                return ServiceResult<byte[]>.CreateError("Failed to load quiz answers");

            var sb = new StringBuilder();
            
            // Add quiz header
            sb.AppendLine($"{quiz.Name}");
            sb.AppendLine($"Topic: {quiz.Prompt}");
            sb.AppendLine($"Difficulty: {char.ToUpper(quiz.Difficulty[0]) + quiz.Difficulty[1..]}");
            sb.AppendLine($"Created: {quiz.CreatedAt:g}");
            sb.AppendLine();

            // Add questions and answers
            for (int i = 0; i < questions.Count(); i++)
            {
                var question = questions.ElementAt(i);
                var questionAnswers = answers.Where(a => a.QuestionId == question.Id).ToList();

                sb.AppendLine($"{i + 1}. {question.Text}");
                
                foreach (var answer in questionAnswers)
                {
                    var answerText = $"- {answer.Text}";
                    if (includeAnswers && answer.IsCorrect)
                        answerText = $"* {answer.Text} (correct)";
                    
                    sb.AppendLine($"   {answerText}");
                }

                if (includeAnswers && !string.IsNullOrEmpty(question.Explanation))
                {
                    sb.AppendLine($"\n   Explanation: {question.Explanation}");
                }

                sb.AppendLine();
            }

            sb.AppendLine("Generated by QuizGen");

            return ServiceResult<byte[]>.CreateSuccess(Encoding.UTF8.GetBytes(sb.ToString()));
        }
        catch (Exception ex)
        {
            return ServiceResult<byte[]>.CreateError($"Failed to export quiz as text: {ex.Message}");
        }
    }

    public async Task<ServiceResult<byte[]>> ExportTryAsPdfAsync(int quizTryId)
    {
        try
        {
            var quizTry = await _quizTryRepository.GetByIdAsync(quizTryId);
            if (quizTry == null)
                return ServiceResult<byte[]>.CreateError("Quiz try not found");

            var quiz = await _quizRepository.GetByIdAsync(quizTry.QuizId);
            if (quiz == null)
                return ServiceResult<byte[]>.CreateError("Quiz not found");

            var questions = (await _questionRepository.GetByQuizIdAsync(quiz.Id)).ToList();
            if (questions == null || !questions.Any())
                return ServiceResult<byte[]>.CreateError("No questions found for this quiz");

            var answers = (await _answerRepository.GetByQuizIdAsync(quiz.Id)).ToList();
            if (answers == null)
                return ServiceResult<byte[]>.CreateError("Failed to load quiz answers");

            var selectedAnswers = await _quizTryRepository.GetAnswersAsync(quizTryId);
            if (selectedAnswers == null)
                return ServiceResult<byte[]>.CreateError("Failed to load selected answers");

            var document = new QuizTryDocument(quiz, quizTry, questions, answers, selectedAnswers);
            var pdfBytes = document.GeneratePdf();

            return ServiceResult<byte[]>.CreateSuccess(pdfBytes);
        }
        catch (Exception ex)
        {
            return ServiceResult<byte[]>.CreateError($"Failed to export quiz try as PDF: {ex.Message}");
        }
    }

    public async Task<ServiceResult<byte[]>> ExportTryAsTextAsync(int quizTryId)
    {
        try
        {
            var quizTry = await _quizTryRepository.GetByIdAsync(quizTryId);
            if (quizTry == null)
                return ServiceResult<byte[]>.CreateError("Quiz try not found");

            var quiz = await _quizRepository.GetByIdAsync(quizTry.QuizId);
            if (quiz == null)
                return ServiceResult<byte[]>.CreateError("Quiz not found");

            var questions = await _questionRepository.GetByQuizIdAsync(quiz.Id);
            if (questions == null || !questions.Any())
                return ServiceResult<byte[]>.CreateError("No questions found for this quiz");

            var answers = await _answerRepository.GetByQuizIdAsync(quiz.Id);
            if (answers == null)
                return ServiceResult<byte[]>.CreateError("Failed to load quiz answers");

            var selectedAnswers = await _quizTryRepository.GetAnswersAsync(quizTryId);
            if (selectedAnswers == null)
                return ServiceResult<byte[]>.CreateError("Failed to load selected answers");

            var sb = new StringBuilder();
            
            // Add quiz header
            sb.AppendLine($"{quiz.Name}");
            sb.AppendLine($"Topic: {quiz.Prompt}");
            sb.AppendLine($"Difficulty: {char.ToUpper(quiz.Difficulty[0]) + quiz.Difficulty[1..]}");
            sb.AppendLine();
            sb.AppendLine($"Taken on: {quizTry.StartedAt:g}");
            sb.AppendLine($"Score: {quizTry.Score:F1}%");
            sb.AppendLine();

            // Add questions and answers
            for (int i = 0; i < questions.Count(); i++)
            {
                var question = questions.ElementAt(i);
                var questionAnswers = answers.Where(a => a.QuestionId == question.Id).ToList();
                var userAnswers = selectedAnswers.Where(a => a.QuestionId == question.Id)
                    .Select(a => a.AnswerId).ToList();

                sb.AppendLine($"{i + 1}. {question.Text}");
                
                foreach (var answer in questionAnswers)
                {
                    var isSelected = userAnswers.Contains(answer.Id);
                    var answerText = $"- {answer.Text}";
                    if (answer.IsCorrect)
                        answerText = $"* {answer.Text} (correct)";
                    if (isSelected)
                        answerText += " (your answer)";
                    
                    sb.AppendLine($"   {answerText}");
                }

                if (!string.IsNullOrEmpty(question.Explanation))
                {
                    sb.AppendLine($"\n   Explanation: {question.Explanation}");
                }

                sb.AppendLine();
            }

            sb.AppendLine($"\nCreated: {quiz.CreatedAt:g}");
            sb.AppendLine("Generated by QuizGen");

            return ServiceResult<byte[]>.CreateSuccess(Encoding.UTF8.GetBytes(sb.ToString()));
        }
        catch (Exception ex)
        {
            return ServiceResult<byte[]>.CreateError($"Failed to export quiz try as text: {ex.Message}");
        }
    }
} 