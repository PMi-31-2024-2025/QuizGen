using QuestPDF.Fluent;
using QuestPDF.Infrastructure;
using QuizGen.DAL.Models;

namespace QuizGen.BLL.Services.Documents;

public class QuizDocument : IDocument
{
    private readonly Quiz _quiz;
    private readonly IList<Question> _questions;
    private readonly IList<Answer> _answers;
    private readonly bool _includeAnswers;

    public QuizDocument(Quiz quiz, IList<Question> questions, IList<Answer> answers, bool includeAnswers)
    {
        _quiz = quiz;
        _questions = questions;
        _answers = answers;
        _includeAnswers = includeAnswers;
    }

    public void Compose(IDocumentContainer container)
    {
        _ = container.Page(page =>
        {
            page.Margin(50);

            page.Header().Element(ComposeHeader);
            page.Content().Element(ComposeContent);
            page.Footer().Element(ComposeFooter);
        });
    }

    private void ComposeHeader(IContainer container)
    {
        container.Row(row =>
        {
            row.RelativeItem().Column(column =>
            {
                _ = column.Item().Text(_quiz.Name)
                    .FontSize(20)
                    .Bold();

                _ = column.Item().Text($"Topic: {_quiz.Prompt}")
                    .FontSize(12);

                _ = column.Item().Text($"Difficulty: {char.ToUpper(_quiz.Difficulty[0]) + _quiz.Difficulty[1..]}")
                    .FontSize(12);
            });
        });
    }

    private void ComposeContent(IContainer container)
    {
        container.PaddingVertical(20).Column(column =>
        {
            for (int i = 0; i < _questions.Count; i++)
            {
                var question = _questions[i];
                var questionAnswers = _answers.Where(a => a.QuestionId == question.Id).ToList();

                _ = column.Item().Text($"{i + 1}. {question.Text}")
                    .FontSize(12)
                    .Bold();

                foreach (var answer in questionAnswers)
                {
                    column.Item().PaddingLeft(20).Text(text =>
                    {
                        _ = text.Span("- ").FontSize(11);
                        _ = text.Span(answer.Text)
                            .FontSize(11)
                            .FontColor(_includeAnswers && answer.IsCorrect ? "#008000" : "#000000");
                    });
                }

                if (_includeAnswers && !string.IsNullOrEmpty(question.Explanation))
                {
                    _ = column.Item().PaddingLeft(20).PaddingTop(5)
                        .Text($"Explanation: {question.Explanation}")
                        .FontSize(10)
                        .Italic()
                        .FontColor("#666666");
                }

                _ = column.Item().PaddingBottom(10);
            }
        });
    }

    private void ComposeFooter(IContainer container)
    {
        container.Row(row =>
        {
            _ = row.RelativeItem().Text($"Created: {_quiz.CreatedAt:g}")
                .FontSize(10);

            row.RelativeItem().AlignRight().Text(text =>
            {
                _ = text.Span("Generated by ")
                    .FontSize(10);
                _ = text.Span("QuizGen")
                    .FontSize(10)
                    .Bold();
            });
        });
    }
}